// Class automatically generated by Dev-C++ New Class wizard

#ifndef ARBOLAVL_H
#define ARBOLAVL_H
#include "ArbolBB.h"
/*
 * No description
 */
template <class T>
class ArbolAVL : public ArbolBB<T>
{
	public:
		// class constructor
		ArbolAVL(){}        
		int Agre_Busc(T,bool band=false);	
    protected:
        void InsercionAVL(NodoA<T>*&,T);
        int altura(NodoA<T>*);
        int rotacion(NodoA<T>*,NodoA<T>**,NodoA<T>**,T);
};
template <class T>
int ArbolAVL<T>::Agre_Busc(T ele,bool band){
    NodoA<T> *pnuev,*recor,*antes;
	int enc = 0,nivel = 0;
	recor = this->get_raiz();
	while(recor && !enc){
		antes = recor;
		if(ele == recor->get_inf())
			enc = 1;
		else{
			if(ele < recor->get_inf())
				recor = recor->get_HI();
			else
				recor = recor->get_HD();
		}
		nivel++;
	}	
	if(band)
		return enc;
	if(enc) return 0;
    NodoA<T>* recor2;
    recor2 = this->get_raiz();
    InsercionAVL(recor2,ele);
    this->set_raiz(recor2);
}
template <class T>
int ArbolAVL<T>::rotacion(NodoA<T> *nod0, NodoA<T> **nodo1, NodoA<T> **nodo2, T info)
{	int x1=0, x2=0;
	//premisa: siempre se va por la izquierda
	(*nodo1)=nod0->get_HI();
	if(info > nod0->get_inf()){
		x2=1;
		(*nodo1)= nod0->get_HD();
	}

	(*nodo2)=(*nodo1)->get_HI();
	if(info > (*nodo1)->get_inf())
	{
		x1=1;
		(*nodo2)=(*nodo1)->get_HD();		
	}
	return(x2*2+x1);
}
template <class T>
int ArbolAVL<T>::altura(NodoA<T> *raiz){
    if(!raiz)
    return -1;
    else{
        int xi = altura(raiz->get_HI());
        int xd = altura(raiz->get_HD());
        if(xi>xd)
        return xi+1;
        else
        return xd+1;
    }
}
template <class T>
void ArbolAVL<T>::InsercionAVL(NodoA<T>* &r,T info){
   NodoA<T> *nuevo;
   nuevo = new NodoA<T>;
   if(!r){    
             r = new NodoA<T>;
             nuevo->set_inf(info);
             r = nuevo;     
   }else{
        NodoA<T> *recor;
        if(info < r->get_inf()){
             recor=r->get_HI();
             InsercionAVL(recor,info);
             r->set_HI(recor);
        }else{ 
             recor=r->get_HD();
             InsercionAVL(recor,info);
             r->set_HD(recor);
             }
        
   }
   if((abs(altura(r->get_HI())-altura(r->get_HD()))>1)){
                        NodoA<T> *nodo0 = r,*nodo1=NULL,*nodo2=NULL;
                        int rota= rotacion(nodo0,&nodo1,&nodo2,info);
                        switch(rota){
                                case 0:                                
                                        nodo0->set_HI(nodo1->get_HD());
                                        nodo1->set_HD(nodo0);
                                        nodo0=nodo1;
                                        break;
                                case 1:
                                        nodo1->set_HD(nodo2->get_HI());
                                        nodo2->set_HI(nodo1);
                                        nodo0->set_HI(nodo2->get_HD());
                                        nodo2->set_HD(nodo0);
                                        nodo0=nodo2;
                                        break;
                                case 2:
                                        nodo1->set_HI(nodo2->get_HD());
                                        nodo2->set_HD(nodo1);
                                        nodo0->set_HD(nodo2->get_HI());
                                        nodo2->set_HI(nodo0);
                                        nodo0=nodo2;
                                        break;
                                case 3:
                                        nodo0->set_HD(nodo1->get_HI());
                                        nodo1->set_HI(nodo0);
                                        nodo0=nodo1;
                                        break;
                        }
                        r=nodo0;
                }

}
#endif // ARBOLAVL_H
